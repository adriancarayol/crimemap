<div class="row">
  <br>
  <div class="has-text-centered">
    <h1 class="title">Search crimes on the map</h1>
    <p class="has-text-weight-bold">or</p>
    <%= link "New Crime", to: Routes.crime_path(@conn, :new), class: "button is-link" %>
  </div>
</div>

<div id="floating-panel">
  <input id="pac-input" type="text" placeholder="Search a location...">
</div>
<div id="map"></div>
<script>
      var map;
      var markers = [];
      var circles = [];

      function initAutocomplete() {
        map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: -33.8688, lng: 151.2195},
          zoom: 13,
          mapTypeControlOptions: {
            mapTypeIds: [google.maps.MapTypeId.ROADMAP, ]
          },
          disableDefaultUI: true,
          scaleControl: true,
          zoomControl: true,
          zoomControlOptions: {
            style: google.maps.ZoomControlStyle.LARGE 
          },
          mapTypeId: google.maps.MapTypeId.ROADMAP
        });
  
        map.addListener('idle', onBoundsChanged);
      
        infoWindow = new google.maps.InfoWindow;

        // Try HTML5 geolocation.
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var pos = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };

            infoWindow.setPosition(pos);
            infoWindow.setContent('Location found.');
            infoWindow.open(map);
            map.setCenter(pos);
          }, function() {
            handleLocationError(true, infoWindow, map.getCenter());
          });
        } else {
          // Browser doesn't support Geolocation
          handleLocationError(false, infoWindow, map.getCenter());
        }

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
          var bounds = map.getBounds();
          var ne = bounds.getNorthEast();
          var sw = bounds.getSouthWest();
          fillMap(ne.lng(), ne.lat(), sw.lng(), sw.lat());
  
        });
      }
      function handleLocationError(browserHasGeolocation, infoWindow, pos) {
        infoWindow.setPosition(pos);
        infoWindow.setContent(browserHasGeolocation ?
                              'Error: The Geolocation service failed.' :
                              'Error: Your browser doesn\'t support geolocation.');
        infoWindow.open(map);
      }
      function onBoundsChanged(event) {
        var bounds = map.getBounds();
        var ne = bounds.getNorthEast();
        var sw = bounds.getSouthWest();

        setTimeout(function() {
          fillMap(ne.lng(), ne.lat(), sw.lng(), sw.lat(), 1000);
        });
      }
      function infoCallback(infowindow, marker) {
        return function() { infowindow.open(map, marker); };
      }

      function fillMap(lat1, lng1, lat2, lng2) {
        for (var i = 0; i < markers.length; i++) {
          markers[i].setMap(null);
        }

        for (var i = 0; i < circles.length; i++) {
          circles[i].setMap(null);
        }

        markers = [];
        circles = [];

        var getUrl = window.location;
        var baseUrl = getUrl.protocol + "//" + getUrl.host;
        var url = new URL(baseUrl + '/api/crimes/'),
        params = {lat1: lat1, lng1: lng1, lat2: lat2, lng2: lng2}
        Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))
  
        fetch(url)
        .then(function(response) {
          return response.json();
        })
        .then(function(data) {
          Array.from(data.crimes).forEach((crime) => {
            var position = {lat: parseFloat(crime.lat), lng: parseFloat(crime.lng)};

            var marker = new google.maps.Marker({
              position: position,
              map: map,
              title: crime.title
            });

            var circle = new google.maps.Circle({
              strokeColor: '#FF0000',
              strokeOpacity: 0.8,
              strokeWeight: 2,
              fillColor: '#FF0000',
              fillOpacity: 0.35,
              map: map,
              center: position,
              radius: 50
            });

            var infowindow = new google.maps.InfoWindow({
              content: "<div class=infowindow><h1>" + crime.title + "</h1><p>Details: " + crime.details + "</p><p>Inserted at: " + crime.inserted_at + "</p></div>"
            });

            google.maps.event.addListener(marker, 'click', infoCallback(infowindow, marker));

            markers.push(marker);
            circles.push(circle);

          })
        });
      }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAMkItNBLJ2IfZw8WwwmrGHOsUfK4ZwWmU&libraries=places&callback=initAutocomplete" async defer></script>
